name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      track:
        description: 'Release track'
        required: true
        default: 'internal'
        type: choice
        options:
        - internal
        - alpha
        - beta
        - production
      platform:
        description: 'Platform to release'
        required: true
        default: 'all'
        type: choice
        options:
        - android
        - ios
        - linux
        - all

permissions:
  contents: write
  actions: read

env:
  FLUTTER_VERSION: '3.32.5'
  JAVA_VERSION: '21'

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      track: ${{ steps.track.outputs.track }}
      platform: ${{ steps.platform.outputs.platform }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
        
    - name: Determine track
      id: track
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          TRACK="production"
        else
          TRACK="${{ github.event.inputs.track }}"
        fi
        echo "track=$TRACK" >> $GITHUB_OUTPUT
        echo "Release track: $TRACK"
        
    - name: Determine platform
      id: platform
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          PLATFORM="all"
        else
          PLATFORM="${{ github.event.inputs.platform }}"
        fi
        echo "platform=$PLATFORM" >> $GITHUB_OUTPUT
        echo "Release platform: $PLATFORM"

  build_android:
    name: Build Android Release
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.platform == 'android' || needs.prepare.outputs.platform == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Update version
      run: |
        VERSION="${{ needs.prepare.outputs.version }}"
        sed -i "s/^version:.*/version: $VERSION+${{ github.run_number }}/" pubspec.yaml
        echo "Updated version to: $VERSION+${{ github.run_number }}"
        
    - name: Setup Android signing (if secrets available)
      run: |
        if [ -n "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ] && [ -n "${{ secrets.ANDROID_STORE_PASSWORD }}" ]; then
          echo "Setting up Android signing with secrets"
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/release-keystore.jks
          cat > android/key.properties << EOF
        storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}
        keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
        keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
        storeFile=release-keystore.jks
        EOF
        else
          echo "No Android signing secrets found, will use debug signing"
          echo "Creating empty key.properties to trigger fallback"
          touch android/key.properties
        fi
        
    - name: Build AAB
      run: flutter build appbundle --release
      
    - name: Build APK
      run: flutter build apk --release
      
    - name: Upload AAB artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-aab-release
        path: build/app/outputs/bundle/release/app-release.aab
        retention-days: 90
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-release
        path: build/app/outputs/flutter-apk/app-release.apk
        retention-days: 90

  build_linux:
    name: Build Linux Release
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.platform == 'linux' || needs.prepare.outputs.platform == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libglib2.0-dev ninja-build cmake \
                                libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
        
    - name: Install AppImage tools
      run: |
        wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage -O /tmp/appimagetool
        chmod +x /tmp/appimagetool
        sudo mv /tmp/appimagetool /usr/local/bin/appimagetool
        
    - name: Enable Linux desktop
      run: flutter config --enable-linux-desktop
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Update version
      run: |
        VERSION="${{ needs.prepare.outputs.version }}"
        sed -i "s/^version:.*/version: $VERSION+${{ github.run_number }}/" pubspec.yaml
        echo "Updated version to: $VERSION+${{ github.run_number }}"
        
    - name: Build Linux release
      run: ./scripts/build_linux.sh -p --appimage --skip-tests
      
    - name: Upload Linux AppImage artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-appimage-release
        path: build/linux/*.AppImage
        retention-days: 90
        if-no-files-found: error

  build_ios:
    name: Build iOS Release
    runs-on: macos-latest
    needs: prepare
    if: needs.prepare.outputs.platform == 'ios' || needs.prepare.outputs.platform == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Update version
      run: |
        VERSION="${{ needs.prepare.outputs.version }}"
        sed -i '' "s/^version:.*/version: $VERSION+${{ github.run_number }}/" pubspec.yaml
        echo "Updated version to: $VERSION+${{ github.run_number }}"
        
    - name: Install certificates
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
      run: |
        # 创建临时密钥链
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        
        # 解码证书和配置文件
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
        
        # 创建密钥链
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # 导入证书
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
        # 安装配置文件
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        
    - name: Build iOS
      run: flutter build ios --release
      
    - name: Build Archive
      run: |
        xcodebuild -workspace ios/Runner.xcworkspace \
                   -scheme Runner \
                   -configuration Release \
                   -destination generic/platform=iOS \
                   -archivePath build/ios/archive/Runner.xcarchive \
                   archive
                   
    - name: Export IPA
      run: |
        cat > build/ios/ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF
        
        xcodebuild -exportArchive \
                   -archivePath build/ios/archive/Runner.xcarchive \
                   -exportPath build/ios/ipa \
                   -exportOptionsPlist build/ios/ExportOptions.plist
                   
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-ipa-release
        path: build/ios/ipa/Runner.ipa
        retention-days: 90
        
    - name: Upload Archive artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-archive-release
        path: build/ios/archive/Runner.xcarchive
        retention-days: 90

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare, build_android, build_ios, build_linux]
    if: always() && (needs.build_android.result == 'success' || needs.build_ios.result == 'success' || needs.build_linux.result == 'success')
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Create Release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # 准备发布信息
        VERSION="${{ needs.prepare.outputs.version }}"
        TRACK="${{ needs.prepare.outputs.track }}"
        PLATFORM="${{ needs.prepare.outputs.platform }}"
        BUILD_NUMBER="${{ github.run_number }}"
        
        # 创建发布说明
        cat > release_notes.md << EOF
        ## Mindra v$VERSION
        
        ### 发布信息
        - **版本**: $VERSION
        - **发布轨道**: $TRACK
        - **平台**: $PLATFORM
        - **构建号**: $BUILD_NUMBER
        
        ### 下载
        - Android APK: 见 Release Assets
        - Android AAB: 见 Release Assets  
        - iOS IPA: 见 Release Assets
        - Linux AppImage: 见 Release Assets（推荐，兼容所有Linux发行版）
        
        ### 说明
        - 所有构建产物仅供测试和分发使用
        - Android 应用使用 debug 签名（如需生产发布，请手动签名）
        - iOS 应用需要手动上传到 App Store Connect
        - Linux 仅提供 AppImage 格式，自包含无依赖，兼容性最佳
        
        ### 更新内容
        请查看 CHANGELOG.md 获取详细更新内容。
        EOF
        
        # 创建 GitHub Release
        if [ "$TRACK" != "production" ]; then
          PRERELEASE="--prerelease"
        else
          PRERELEASE=""
        fi
        
        gh release create "v$VERSION" \
          --title "Mindra v$VERSION" \
          --notes-file release_notes.md \
          $PRERELEASE
          
    - name: Upload release assets
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        VERSION="${{ needs.prepare.outputs.version }}"
        
        # 上传构建产物到 release
        if [ -d "./artifacts" ]; then
          echo "上传构建产物到 release..."
          
          # 上传 Android APK
          if [ -f "./artifacts/android-apk-release/app-release.apk" ]; then
            gh release upload "v$VERSION" "./artifacts/android-apk-release/app-release.apk" --clobber
          fi
          
          # 上传 Android AAB
          if [ -f "./artifacts/android-aab-release/app-release.aab" ]; then
            gh release upload "v$VERSION" "./artifacts/android-aab-release/app-release.aab" --clobber
          fi
          
          # 上传 iOS IPA
          if [ -f "./artifacts/ios-ipa-release/Runner.ipa" ]; then
            gh release upload "v$VERSION" "./artifacts/ios-ipa-release/Runner.ipa" --clobber
          fi
          
          # 上传 Linux AppImage
          if [ -d "./artifacts/linux-appimage-release" ]; then
            for appimage in ./artifacts/linux-appimage-release/*.AppImage; do
              if [ -f "$appimage" ]; then
                gh release upload "v$VERSION" "$appimage" --clobber
              fi
            done
          else
            echo "⚠️ 没有找到Linux AppImage文件"
          fi
          
          echo "✅ 构建产物上传完成"
        else
          echo "⚠️ 没有找到构建产物目录"
        fi
