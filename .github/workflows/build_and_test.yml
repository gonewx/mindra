name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.32.5'
  JAVA_VERSION: '21'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Cache pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.PUB_CACHE }}
          ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-
        
    - name: Get dependencies
      run: |
        echo "Getting Flutter dependencies..."
        flutter pub get
        echo "‚úÖ Dependencies installed"
      
    - name: Verify formatting
      run: |
        echo "Checking code formatting..."
        if ! dart format --output=none --set-exit-if-changed .; then
          echo "‚ö†Ô∏è Code formatting issues found"
          echo "The following files need formatting:"
          dart format --output=none --show=changed .
          echo ""
          echo "üí° To fix locally, run: dart format ."
          echo "‚ö†Ô∏è Continuing with tests, but please fix formatting in future commits"
        else
          echo "‚úÖ Code formatting is correct"
        fi
      
    - name: Analyze project source
      run: |
        echo "Running static analysis..."
        if ! dart analyze --fatal-infos; then
          echo "‚ùå Static analysis failed"
          echo "Please fix the analysis issues shown above"
          echo "üí° To run analysis locally: dart analyze"
          exit 1
        fi
        echo "‚úÖ Static analysis passed"
      
    - name: Run tests
      run: |
        echo "Running Flutter tests with coverage..."
        if flutter test --coverage --reporter=expanded; then
          echo "‚úÖ All tests passed"
        else
          echo "‚ùå Some tests failed"
          echo "Please check the test output above for details"
          echo "üí° To run tests locally: flutter test"
          exit 1
        fi
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build_android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 30
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && needs.test.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Cache pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.PUB_CACHE }}
          ~/.pub-cache
        key: ${{ runner.os }}-android-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-android-pub-
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build APK
      run: |
        echo "Building Android APK..."
        flutter build apk --release --verbose
        echo "‚úÖ APK build completed"
      
    - name: Build AAB  
      run: |
        echo "Building Android AAB..."
        flutter build appbundle --release --verbose
        echo "‚úÖ AAB build completed"
      
    - name: Verify build artifacts
      run: |
        echo "Verifying build artifacts..."
        
        # Ê£ÄÊü•APKÊñá‰ª∂
        if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
          APK_SIZE=$(du -h build/app/outputs/flutter-apk/app-release.apk | cut -f1)
          echo "‚úÖ APK found: $APK_SIZE"
        else
          echo "‚ùå APK not found"
          exit 1
        fi
        
        # Ê£ÄÊü•AABÊñá‰ª∂
        if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
          AAB_SIZE=$(du -h build/app/outputs/bundle/release/app-release.aab | cut -f1)
          echo "‚úÖ AAB found: $AAB_SIZE"
        else
          echo "‚ùå AAB not found"
          exit 1
        fi
        
        echo "‚úÖ All Android build artifacts verified"
      
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: build/app/outputs/flutter-apk/app-release.apk
        retention-days: 30
        
    - name: Upload AAB artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-aab
        path: build/app/outputs/bundle/release/app-release.aab
        retention-days: 30

  build_ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && needs.test.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build iOS (no codesign)
      run: flutter build ios --release --no-codesign
      
    - name: Upload iOS build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: build/ios/iphoneos/Runner.app
        retention-days: 30

  build_linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: test
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && needs.test.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libglib2.0-dev ninja-build cmake \
                                libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
        
    - name: Enable Linux desktop
      run: flutter config --enable-linux-desktop
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Linux
      run: flutter build linux --release
      
    - name: Create Linux package
      run: ./scripts/build_linux.sh -p --skip-tests
      
    - name: Upload Linux bundle artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-bundle
        path: build/linux/x64/release/bundle
        retention-days: 30
        
    - name: Upload Linux DEB artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-deb
        path: build/linux/*.deb
        retention-days: 30
        if-no-files-found: ignore
        
    - name: Upload Linux TAR.GZ artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-tarball
        path: build/linux/*.tar.gz
        retention-days: 30
        if-no-files-found: ignore

  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Run dependency audit
      run: flutter pub deps --json | jq '.packages[] | select(.kind == "direct") | .name' | xargs -I {} echo "Checking {}"
      
    - name: Check for known vulnerabilities
      run: |
        # Ê£ÄÊü•Â∑≤Áü•ÁöÑÂÆâÂÖ®ÈóÆÈ¢ò
        flutter pub deps --json > deps.json
        echo "Dependencies audit completed"

  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [test, build_android, build_ios, build_linux, security_scan]
    if: always()
    
    steps:
    - name: Notify success
      if: |
        needs.test.result == 'success' && 
        (needs.build_android.result == 'success' || needs.build_android.result == 'skipped') &&
        (needs.build_ios.result == 'success' || needs.build_ios.result == 'skipped') &&
        (needs.build_linux.result == 'success' || needs.build_linux.result == 'skipped')
      run: |
        echo "‚úÖ All builds completed successfully!"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Test result: ${{ needs.test.result }}"
        echo "Android build result: ${{ needs.build_android.result }}"
        echo "iOS build result: ${{ needs.build_ios.result }}"
        echo "Linux build result: ${{ needs.build_linux.result }}"
        
    - name: Notify failure
      if: |
        needs.test.result == 'failure' || 
        needs.build_android.result == 'failure' || 
        needs.build_ios.result == 'failure' ||
        needs.build_linux.result == 'failure'
      run: |
        echo "‚ùå Build failed!"
        echo "Test result: ${{ needs.test.result }}"
        echo "Android build result: ${{ needs.build_android.result }}"
        echo "iOS build result: ${{ needs.build_ios.result }}"
        echo "Linux build result: ${{ needs.build_linux.result }}"
        exit 1
