# Mindra iOS Fastlane 配置
# 用于自动化构建和发布流程

default_platform(:ios)

platform :ios do
  # 应用基本信息
  APP_IDENTIFIER = "com.mindra.app"
  WORKSPACE = "Runner.xcworkspace"
  SCHEME = "Runner"
  
  # 构建前准备
  before_all do
    # 确保在正确的目录
    ensure_git_status_clean unless ENV["SKIP_GIT_CHECK"]
    
    # 设置 Xcode 项目
    setup_ci if ENV["CI"]
  end

  # 证书和配置文件管理
  desc "同步证书和配置文件"
  lane :certificates do
    # 使用 match 管理证书（推荐）
    if ENV["MATCH_GIT_URL"]
      match(
        type: "appstore",
        app_identifier: APP_IDENTIFIER,
        readonly: true
      )
    else
      # 手动管理证书
      UI.message("使用手动管理的证书")
      # 这里可以添加手动证书检查逻辑
    end
  end

  # 构建应用
  desc "构建 iOS 应用"
  lane :build do
    # 同步证书
    certificates
    
    # 切换到项目根目录进行 Flutter 构建
    Dir.chdir("..") do
      sh("flutter", "clean")
      sh("flutter", "pub", "get")
      sh("flutter", "build", "ios", "--release")
    end
    
    # 使用 Xcode 构建
    build_app(
      workspace: WORKSPACE,
      scheme: SCHEME,
      configuration: "Release",
      export_method: "app-store",
      output_directory: "../build/ios/ipa",
      output_name: "Runner.ipa",
      include_bitcode: false,
      include_symbols: true
    )
  end

  # TestFlight 发布
  desc "发布到 TestFlight"
  lane :beta do
    # 构建应用
    build
    
    # 上传到 TestFlight
    upload_to_testflight(
      ipa: "../build/ios/ipa/Runner.ipa",
      skip_waiting_for_build_processing: false,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      changelog: get_changelog
    )
    
    UI.success("成功发布到 TestFlight！")
    
    # 发送通知
    send_notification(target: "TestFlight") if ENV["ENABLE_NOTIFICATIONS"]
  end

  # App Store 发布
  desc "发布到 App Store"
  lane :release do
    # 确认操作
    UI.confirm("确定要发布到 App Store 吗？这将对所有用户可见。")
    
    # 构建应用
    build
    
    # 上传到 App Store
    upload_to_app_store(
      ipa: "../build/ios/ipa/Runner.ipa",
      skip_metadata: false,
      skip_screenshots: true,
      submit_for_review: false,  # 手动提交审核
      automatic_release: false,
      force: true
    )
    
    UI.success("成功上传到 App Store！")
    UI.message("请在 App Store Connect 中手动提交审核")
    
    # 发送通知
    send_notification(target: "App Store") if ENV["ENABLE_NOTIFICATIONS"]
  end

  # 仅构建不上传
  desc "仅构建应用"
  lane :build_only do
    build
    UI.success("构建完成，IPA 文件位于: ../build/ios/ipa/Runner.ipa")
  end

  # 获取版本号
  desc "获取应用版本号"
  lane :get_version_number do
    pubspec_path = "../pubspec.yaml"
    pubspec_content = File.read(pubspec_path)
    version_line = pubspec_content.match(/^version:\s*(.+)$/)
    
    if version_line
      version_full = version_line[1].strip
      version_name = version_full.split('+')[0]
      return version_name
    else
      UI.user_error!("无法从 pubspec.yaml 获取版本号")
    end
  end

  # 获取构建号
  desc "获取应用构建号"
  lane :get_build_number do
    pubspec_path = "../pubspec.yaml"
    pubspec_content = File.read(pubspec_path)
    version_line = pubspec_content.match(/^version:\s*(.+)$/)
    
    if version_line
      version_full = version_line[1].strip
      if version_full.include?('+')
        build_number = version_full.split('+')[1]
        return build_number
      else
        return "1"
      end
    else
      UI.user_error!("无法从 pubspec.yaml 获取构建号")
    end
  end

  # 获取更新日志
  desc "获取更新日志"
  lane :get_changelog do
    changelog_path = "../CHANGELOG.md"
    
    if File.exist?(changelog_path)
      changelog_content = File.read(changelog_path)
      # 提取最新版本的更新日志
      lines = changelog_content.split("\n")
      changelog_lines = []
      found_version = false
      
      lines.each do |line|
        if line.start_with?("## ") && found_version
          break
        elsif line.start_with?("## ")
          found_version = true
          next
        elsif found_version && !line.strip.empty?
          changelog_lines << line
        end
      end
      
      if changelog_lines.empty?
        return "Bug fixes and performance improvements"
      else
        return changelog_lines.join("\n").strip
      end
    else
      return "Bug fixes and performance improvements"
    end
  end

  # 更新版本号
  desc "更新版本号"
  lane :bump_version do |options|
    version_type = options[:type] || "patch"  # major, minor, patch
    
    current_version = get_version_number
    current_build = get_build_number.to_i
    
    # 计算新版本号
    version_parts = current_version.split('.').map(&:to_i)
    
    case version_type
    when "major"
      version_parts[0] += 1
      version_parts[1] = 0
      version_parts[2] = 0
    when "minor"
      version_parts[1] += 1
      version_parts[2] = 0
    when "patch"
      version_parts[2] += 1
    end
    
    new_version = version_parts.join('.')
    new_build = current_build + 1
    new_version_full = "#{new_version}+#{new_build}"
    
    # 更新 pubspec.yaml
    pubspec_path = "../pubspec.yaml"
    pubspec_content = File.read(pubspec_path)
    updated_content = pubspec_content.gsub(/^version:\s*.+$/, "version: #{new_version_full}")
    File.write(pubspec_path, updated_content)
    
    UI.success("版本号已更新: #{current_version}+#{current_build} -> #{new_version_full}")
    
    return new_version_full
  end

  # 发送通知
  desc "发送发布通知"
  lane :send_notification do |options|
    target = options[:target]
    version = get_version_number
    build = get_build_number
    
    # Slack 通知
    if ENV["SLACK_URL"]
      slack(
        message: "Mindra iOS #{version} (#{build}) 已发布到 #{target} 🚀",
        slack_url: ENV["SLACK_URL"],
        channel: "#releases",
        username: "Fastlane",
        icon_emoji: ":rocket:"
      )
    end
    
    # 邮件通知
    if ENV["NOTIFICATION_EMAIL"]
      UI.message("发送邮件通知到: #{ENV['NOTIFICATION_EMAIL']}")
    end
  end

  # 运行测试
  desc "运行单元测试"
  lane :test do
    Dir.chdir("..") do
      sh("flutter", "test")
    end
  end

  # 完整的发布流程
  desc "完整的发布流程（构建 + TestFlight）"
  lane :deploy do |options|
    # 运行测试
    test unless ENV["SKIP_TESTS"]
    
    # 发布到 TestFlight
    beta
    
    UI.success("完整发布流程完成！")
  end

  # 错误处理
  error do |lane, exception|
    UI.error("发布失败: #{exception.message}")
    
    # 发送错误通知
    if ENV["SLACK_URL"]
      slack(
        message: "❌ Mindra iOS 发布失败: #{exception.message}",
        slack_url: ENV["SLACK_URL"],
        channel: "#releases",
        username: "Fastlane",
        icon_emoji: ":x:",
        success: false
      )
    end
  end

  # 发布后清理
  after_all do |lane|
    UI.success("发布流程完成！")
    
    # 清理临时文件
    clean_build_artifacts_action
  end
end
